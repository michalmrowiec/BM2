// <auto-generated />
using System;
using BM2.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BM2.Infrastructure.Migrations
{
    [DbContext(typeof(BM2DbContext))]
    [Migration("20250215215244_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BM2.Domain.Entities.System.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("BM2.Domain.Entities.System.RecordStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForPeriodicRecord")
                        .HasColumnType("bit");

                    b.Property<bool>("ForRecords")
                        .HasColumnType("bit");

                    b.Property<string>("RecordStatusName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("SystemCode")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RecordStatuses");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefaultCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("OwnedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DefaultCurrencyId");

                    b.HasIndex("OwnedByUserId");

                    b.HasIndex("WalletId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.AuditLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeOfLogin")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogins");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnedByUserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnedByUserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxAccountsPerWallet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3);

                    b.Property<int>("MaxCategories")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(20);

                    b.Property<int>("MaxPeriodicRecordDefinitions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<int>("MaxRecordTemplates")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<int>("MaxRecordsPerMonth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(50);

                    b.Property<int>("MaxTags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(40);

                    b.Property<int>("MaxWallets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefaultCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("OwnedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalletName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DefaultCurrencyId");

                    b.HasIndex("OwnedByUserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.WalletCategoryRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnedByUserId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletCategoryRelations");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.WalletTagRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnedByUserId");

                    b.HasIndex("TagId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTagRelations");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserRecords.BaseRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("OwnedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PlannedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("StatusId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserRecords.PeriodicRecordDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodicRecordStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SetRecordAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SetRecordStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OwnedByUserId");

                    b.HasIndex("PeriodicRecordStatusId");

                    b.HasIndex("RecordTemplateId");

                    b.HasIndex("SetRecordAccountId");

                    b.HasIndex("SetRecordStatusId");

                    b.HasIndex("WalletId");

                    b.ToTable("PeriodicRecordDefinitions");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserRecords.RecordTagRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnedByUserId");

                    b.HasIndex("RecordId");

                    b.HasIndex("TagId");

                    b.ToTable("RecordTagRelations");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserRecords.Record", b =>
                {
                    b.HasBaseType("BM2.Domain.Entities.UserRecords.BaseRecord");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RecordDateTime")
                        .HasColumnType("datetime2");

                    b.HasIndex("AccountId");

                    b.HasIndex("OwnedByUserId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserRecords.RecordTemplate", b =>
                {
                    b.HasBaseType("BM2.Domain.Entities.UserRecords.BaseRecord");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OwnedByUserId");

                    b.HasIndex("WalletId");

                    b.ToTable("RecordTemplates");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.Account", b =>
                {
                    b.HasOne("BM2.Domain.Entities.System.Currency", null)
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("BM2.Domain.Entities.System.Currency", "DefaultCurrency")
                        .WithMany()
                        .HasForeignKey("DefaultCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserProfile.User", "OwnedByUser")
                        .WithMany("Accounts")
                        .HasForeignKey("OwnedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserProfile.Wallet", "Wallet")
                        .WithMany("Accounts")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefaultCurrency");

                    b.Navigation("OwnedByUser");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.AuditLogin", b =>
                {
                    b.HasOne("BM2.Domain.Entities.UserProfile.User", "User")
                        .WithMany("AuditLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.Category", b =>
                {
                    b.HasOne("BM2.Domain.Entities.UserProfile.User", "OwnedByUser")
                        .WithMany("Categories")
                        .HasForeignKey("OwnedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OwnedByUser");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.Tag", b =>
                {
                    b.HasOne("BM2.Domain.Entities.UserProfile.User", "OwnedByUser")
                        .WithMany("Tags")
                        .HasForeignKey("OwnedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OwnedByUser");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.Wallet", b =>
                {
                    b.HasOne("BM2.Domain.Entities.System.Currency", null)
                        .WithMany("Wallets")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("BM2.Domain.Entities.System.Currency", "DefaultCurrency")
                        .WithMany()
                        .HasForeignKey("DefaultCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserProfile.User", "OwnedByUser")
                        .WithMany("Wallets")
                        .HasForeignKey("OwnedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefaultCurrency");

                    b.Navigation("OwnedByUser");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.WalletCategoryRelation", b =>
                {
                    b.HasOne("BM2.Domain.Entities.UserProfile.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserProfile.User", "OwnedByUser")
                        .WithMany("WalletCategoryRelations")
                        .HasForeignKey("OwnedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserProfile.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("OwnedByUser");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.WalletTagRelation", b =>
                {
                    b.HasOne("BM2.Domain.Entities.UserProfile.User", "OwnedByUser")
                        .WithMany("WalletTagRelations")
                        .HasForeignKey("OwnedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserProfile.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserProfile.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnedByUser");

                    b.Navigation("Tag");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserRecords.BaseRecord", b =>
                {
                    b.HasOne("BM2.Domain.Entities.UserProfile.Category", "Category")
                        .WithMany("Records")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.System.Currency", "Currency")
                        .WithMany("Records")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.System.RecordStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Currency");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserRecords.PeriodicRecordDefinition", b =>
                {
                    b.HasOne("BM2.Domain.Entities.UserProfile.Account", null)
                        .WithMany("PeriodicRecordDefinitions")
                        .HasForeignKey("AccountId");

                    b.HasOne("BM2.Domain.Entities.System.Currency", "Currency")
                        .WithMany("PeriodicRecordDefinitions")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserProfile.User", "OwnedByUser")
                        .WithMany("PeriodicRecordDefinitions")
                        .HasForeignKey("OwnedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.System.RecordStatus", "PeriodicRecordStatus")
                        .WithMany()
                        .HasForeignKey("PeriodicRecordStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserRecords.RecordTemplate", "RecordTemplate")
                        .WithMany("PeriodicRecordDefinitions")
                        .HasForeignKey("RecordTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserProfile.Account", "SetRecordAccount")
                        .WithMany()
                        .HasForeignKey("SetRecordAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.System.RecordStatus", "SetRecordStatus")
                        .WithMany()
                        .HasForeignKey("SetRecordStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserProfile.Wallet", "Wallet")
                        .WithMany("PeriodicRecordDefinitions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("OwnedByUser");

                    b.Navigation("PeriodicRecordStatus");

                    b.Navigation("RecordTemplate");

                    b.Navigation("SetRecordAccount");

                    b.Navigation("SetRecordStatus");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserRecords.RecordTagRelation", b =>
                {
                    b.HasOne("BM2.Domain.Entities.UserProfile.User", "OwnedByUser")
                        .WithMany("RecordTagRelations")
                        .HasForeignKey("OwnedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserRecords.BaseRecord", "Record")
                        .WithMany()
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserProfile.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OwnedByUser");

                    b.Navigation("Record");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserRecords.Record", b =>
                {
                    b.HasOne("BM2.Domain.Entities.UserProfile.Account", "Account")
                        .WithMany("Records")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserProfile.User", "OwnedByUser")
                        .WithMany("Records")
                        .HasForeignKey("OwnedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("OwnedByUser");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserRecords.RecordTemplate", b =>
                {
                    b.HasOne("BM2.Domain.Entities.UserProfile.User", "OwnedByUser")
                        .WithMany("RecordTemplates")
                        .HasForeignKey("OwnedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM2.Domain.Entities.UserProfile.Wallet", "Wallet")
                        .WithMany("RecordTemplates")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnedByUser");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BM2.Domain.Entities.System.Currency", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("PeriodicRecordDefinitions");

                    b.Navigation("Records");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.Account", b =>
                {
                    b.Navigation("PeriodicRecordDefinitions");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.Category", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("AuditLogins");

                    b.Navigation("Categories");

                    b.Navigation("PeriodicRecordDefinitions");

                    b.Navigation("RecordTagRelations");

                    b.Navigation("RecordTemplates");

                    b.Navigation("Records");

                    b.Navigation("Tags");

                    b.Navigation("WalletCategoryRelations");

                    b.Navigation("WalletTagRelations");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserProfile.Wallet", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("PeriodicRecordDefinitions");

                    b.Navigation("RecordTemplates");
                });

            modelBuilder.Entity("BM2.Domain.Entities.UserRecords.RecordTemplate", b =>
                {
                    b.Navigation("PeriodicRecordDefinitions");
                });
#pragma warning restore 612, 618
        }
    }
}
