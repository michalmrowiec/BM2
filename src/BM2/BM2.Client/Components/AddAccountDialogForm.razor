@using BM2.Domain.Entities.UserProfile
@using BM2.Shared.DTOs
@using BM2.Shared.Requests.Commands.Account
@using Newtonsoft.Json
@using BM2.Shared.Requests.Commands.Wallet
@inject ISnackbar Snackbar
@inject IAlertService AlertService
@inject IApiOperator ApiOperator

<BaseDialog DialogTitle="New wallet" MudDialog="@MudDialog"
            FuncsOnCreated="@( [EventCallback.Factory.Create(this, Submit)])"
            FuncsOnCancel="@([EventCallback.Factory.Create(this, Cancel)])">
    <BodyContent>
        <MudForm Model="@_model"
                 @ref="@_form"
                 ValidationDelay="0">
            <MudCardContent>
                <MudAutocomplete T="WalletDTO"
                                 SearchFunc="WalletSearch"
                                 Label="Wallet"
                                 ToStringFunc="@((i) => WalletDisplay(i))"
                                 Clearable MaxItems="100"/>
                
                <MudAutocomplete T="CurrencyDTO"
                                 SearchFunc="Search"
                                 Label="Account currency"
                                 ToStringFunc="@((i) => CurrencyDisplay(i))"
                                 Clearable MaxItems="1000"/>

                <MudTextField @bind-Value="_model.AccountName"
                              For="@(() => _model.AccountName)"
                              Immediate="true"
                              Label="Name"
                              MaxLength="@Wallet.WalletNameMaxLength"
                              Required/>

                <MudCheckBox T="bool" Label="Is active" @bind-Value="_model.IsActive"/>
            </MudCardContent>
        </MudForm>
    </BodyContent>
</BaseDialog>

@code {
    [Parameter] public List<EventCallback>? FuncsOnCreated { get; set; } = new();
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    private MudForm _form;
    private AddAccountCommand _model = new();
    private IEnumerable<CurrencyDTO> _currencies = [];
    private IEnumerable<WalletDTO> _wallets = [];

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            var response = await ApiOperator.Create(@"api/v1/accounts", _model);
            if (response.StatusCode == System.Net.HttpStatusCode.Created)
            {
                var content = await response.Content.ReadAsStringAsync();
                var newItem = JsonConvert.DeserializeObject<AccountDTO>(content) ?? new();

                Snackbar.Add(new MarkupString($"Created<b>{newItem.AccountName}</b>"), Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
                FuncsOnCreated?.ForEach(async x => await x.InvokeAsync());
            }
            else
            {
                await response.HandleFailure(AlertService);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await ApiOperator.Get(@"api/v1/currencies");
        var r = await response.Content.ReadAsStringAsync();
        var crs = JsonConvert.DeserializeObject<List<CurrencyDTO>>(r) ?? new List<CurrencyDTO>();
        _currencies = crs.OrderBy(x => x.Name);
        
        var response2 = await ApiOperator.Get(@"api/v1/wallets");
        var r2 = await response2.Content.ReadAsStringAsync();
        var crs2 = JsonConvert.DeserializeObject<List<WalletDTO>>(r2) ?? new List<WalletDTO>();
        _wallets = crs2.OrderBy(x => x.WalletName);
        
        StateHasChanged();
    }

    private async Task<IEnumerable<CurrencyDTO>> Search(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return _currencies;

        return _currencies.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase) || x.Symbol.Contains(value, StringComparison.InvariantCultureIgnoreCase) || x.IsoCode.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private string CurrencyDisplay(CurrencyDTO? currencyDto)
    {
        if (currencyDto == null)
            return string.Empty;

        _model.DefaultCurrencyId = currencyDto.Id;

        return $"[{currencyDto.IsoCode}] {currencyDto.Name}";
    }
    
    private async Task<IEnumerable<WalletDTO>> WalletSearch(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return _wallets;

        return _wallets.Where(x => x.WalletName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
    private string WalletDisplay(WalletDTO? walletDto)
    {
        if (walletDto == null)
            return string.Empty;

        _model.WalletId = walletDto.Id;

        return $"{walletDto.WalletName} [{walletDto.DefaultCurrency?.IsoCode}]";
    }
}