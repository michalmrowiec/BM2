@using System.Net
@using BM2.Shared.DTOs
@using BM2.Shared.Requests.Commands.Account
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject IAlertService AlertService
@inject IApiClient ApiClient

<BaseDialog DialogTitle="New wallet" MudDialog="@MudDialog"
            FuncsOnCreated="@( [EventCallback.Factory.Create(this, Submit)])"
            FuncsOnCancel="@( [EventCallback.Factory.Create(this, Cancel)])">
    <BodyContent>
        <MudForm Model="@_model"
                 @ref="@_form"
                 ValidationDelay="0">
            <MudCardContent>
                <WalletAutocomplete Label="Wallet"
                                    SelectedWallet="@(async (w) =>
                                                    {
                                                        _model.WalletId = w.Id;
                                                        await _currencyAutocompleteRef?.SelectCurrency(w.DefaultCurrencyId)!;
                                                    })"/>

                <CurrencyAutocomplete @ref="_currencyAutocompleteRef"
                                      Label="Account default currency"
                                      SelectedCurrency="@((c) => _model.DefaultCurrencyId = c.Id)"/>

                <MudTextField @bind-Value="_model.AccountName"
                              For="@(() => _model.AccountName)"
                              Immediate="true"
                              Label="Name"
                              MaxLength="@ModelsRequirements.AccountNameMaxLength"
                              Required/>

                <MudCheckBox T="bool" Label="Is active" @bind-Value="_model.IsActive"/>
            </MudCardContent>
        </MudForm>
    </BodyContent>
</BaseDialog>

@code {
    [Parameter] public List<EventCallback>? FuncsOnCreated { get; set; } = new();
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    private MudForm _form;
    private AddAccountCommand _model = new();
    private IEnumerable<WalletDTO> _wallets = [];
    //private WalletDTO _selectedWallet;
    private CurrencyAutocomplete? _currencyAutocompleteRef;

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        //_model.WalletId = _selectedWallet.Id;

        await _form.Validate();

        if (_form.IsValid)
        {
            var response = await ApiClient.Create(@"api/v1/accounts", _model);
            if (response.StatusCode == HttpStatusCode.Created)
            {
                var content = await response.Content.ReadAsStringAsync();
                var newItem = JsonConvert.DeserializeObject<AccountDTO>(content) ?? new();

                Snackbar.Add(new MarkupString($"Created <b>{newItem.AccountName}</b>"), Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
                FuncsOnCreated?.ForEach(async x => await x.InvokeAsync());
            }
            else
            {
                await response.HandleFailure(AlertService);
            }
        }
    }

}