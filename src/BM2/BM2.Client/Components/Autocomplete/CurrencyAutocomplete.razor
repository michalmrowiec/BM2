@using BM2.Shared.DTOs
@using Newtonsoft.Json
@inject IApiClient ApiClient

<MudAutocomplete T="CurrencyDTO"
                 ValueChanged="@(async (c) => await SelectedCurrency.InvokeAsync(c))"
                 SearchFunc="Search"
                 Label="@Label"
                 ToStringFunc="@((c) => CurrencyDisplay(c))"
                 Clearable
                 MaxItems="1000"/>

@code {
    [Parameter] public string Label { get; set; } = "Currency";
    [Parameter] public EventCallback<CurrencyDTO> SelectedCurrency { get; set; }
    private IEnumerable<CurrencyDTO> _currencies = [];
    
    protected override async Task OnInitializedAsync()
    {
        var response = await ApiClient.Get(@"api/v1/currencies");
        var responseString = await response.Content.ReadAsStringAsync();
        var currencies = JsonConvert.DeserializeObject<List<CurrencyDTO>>(responseString) ?? [];
        _currencies = currencies.OrderBy(x => x.Name);
        StateHasChanged();
    }

    private async Task<IEnumerable<CurrencyDTO>> Search(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return _currencies;

        return _currencies.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase) || x.Symbol.Contains(value, StringComparison.InvariantCultureIgnoreCase) || x.IsoCode.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private string CurrencyDisplay(CurrencyDTO? currency)
    {
        if (currency == null)
            return string.Empty;

        return currency.ToString();
    }

}