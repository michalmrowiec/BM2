@inject IApiClient ApiClient
@using Newtonsoft.Json
@typeparam TEntityDTO where TEntityDTO : class, BM2.Shared.DTOs.Interfaces.IEntityDTO

<MudAutocomplete T="TEntityDTO"
                 @ref="_mudAutocomplete"
                 ValueChanged="@(async (value) =>
                               {
                                   await SelectedValue.InvokeAsync(value);
                                   _selectedValue = value;
                               })"
                 SearchFunc="Search"
                 Label="@Label"
                 Required="@Required"
                 ToStringFunc="@((c) => CurrencyDisplay(c))"
                 Clearable
                 MaxItems="1000"/>

@code {
    protected string Uri { get; set; } = string.Empty;
    [Parameter] public string Label { get; set; } = "Autocomplete";
    [Parameter] public bool Required { get; set; }
    [Parameter] public EventCallback<TEntityDTO?> SelectedValue { get; set; }
    protected Func<TEntityDTO, object>? OrderFunc { get; set; }
    protected Func<TEntityDTO, string, bool> SearchFunc { get; set; }
    [Parameter] public Func<TEntityDTO, bool>? SelectStartValue { get; set; }
    private IEnumerable<TEntityDTO> _values = [];
    private MudAutocomplete<TEntityDTO>? _mudAutocomplete;
    private TEntityDTO? _selectedValue;

    protected override async Task OnInitializedAsync()
    {
        await GetValues();

        if (SelectStartValue is not null)
        {
            await SelectValueBy(SelectStartValue);
        }
    }

    public async Task SetUri(string uri = "", Guid? selectId = null)
    {
        TEntityDTO? temp = null;
        if (_selectedValue is not null)
        {
            temp = _selectedValue;
            await _mudAutocomplete!.ClearAsync();
        }

        Uri = uri;
        await GetValues();

        if (selectId is not null)
            await SelectValueById(selectId);
        else if (temp is not null && !_values.Contains(temp))
            await SelectValueById(temp.Id);

        StateHasChanged();
    }

    public async Task SelectValueById(Guid? id)
    {
        if (_values.Any(x => x.Id == id))
        {
            await _mudAutocomplete!.SelectOptionAsync(_values.First(x => x.Id == id));

            await SelectedValue.InvokeAsync(_values.First(x => x.Id == id));
        }
    }

    public async Task SelectValueBy(Func<TEntityDTO, bool> predicate)
    {
        if (_values.Any(predicate))
        {
            await _mudAutocomplete!.SelectOptionAsync(_values.First(predicate));

            await SelectedValue.InvokeAsync(_values.First(predicate));
        }
    }

    private async Task GetValues()
    {
        if (string.IsNullOrWhiteSpace(Uri))
            return;

        var response = await ApiClient.Get(Uri);
        var responseString = await response.Content.ReadAsStringAsync();
        var values = JsonConvert.DeserializeObject<List<TEntityDTO>>(responseString) ?? [];
        if (OrderFunc is not null)
            _values = values.OrderBy(OrderFunc);

        StateHasChanged();
    }

    private async Task<IEnumerable<TEntityDTO>> Search(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return _values;

        return _values.Where(x => SearchFunc(x, value));
    }

    private string CurrencyDisplay(TEntityDTO? value)
    {
        if (value == null)
            return string.Empty;

        return value.ToString()!;
    }

}