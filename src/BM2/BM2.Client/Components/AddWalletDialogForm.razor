@using System.Net
@using BM2.Domain.Entities.UserProfile
@using BM2.Shared.DTOs
@using BM2.Shared.Requests.Commands.Wallet
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject IAlertService AlertService
@inject IApiClient ApiClient

<BaseDialog DialogTitle="@(FormType == DialogFormType.Add ? "New wallet" : "Edit wallet")" MudDialog="@MudDialog"
            ConfirmButtonText="@(FormType == DialogFormType.Add ? BaseDialog.ConfirmText.Add : BaseDialog.ConfirmText.Update)"
            FuncsOnCreated="@( [EventCallback.Factory.Create(this, Submit)])"
            FuncsOnCancel="@( [EventCallback.Factory.Create(this, Cancel)])">
    <BodyContent>
        <MudForm Model="@_model"
                 @ref="@_form"
                 ValidationDelay="0">
            <MudCardContent>
                <CurrencyAutocomplete Label="Default currency"
                                      Required
                                      SelectStartValue="@(x => WalletToUpdate is not null && x.Id == WalletToUpdate.DefaultCurrencyId)"
                                      SelectedValue="@((c) =>
                                                     {
                                                         _model.DefaultCurrencyId = c.Id;
                                                         _selectedCurrency = c;
                                                         StateHasChanged();
                                                     })"/>

                <MudTextField @bind-Value="_model.WalletName"
                              For="@(() => _model.WalletName)"
                              Immediate="true"
                              Label="Name"
                              MaxLength="@ModelsRequirements.WalletNameMaxLength"
                              Required/>

                <MudCheckBox T="bool" Label="Is active" @bind-Value="_model.IsActive"/>
            </MudCardContent>
        </MudForm>
    </BodyContent>
</BaseDialog>

@code {
    [Parameter] public List<EventCallback>? FuncsOnCreated { get; set; } = new();
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    [Parameter] public WalletDTO? WalletToUpdate { get; set; }
    [Parameter] public DialogFormType FormType { get; set; } = DialogFormType.Add;
    private MudForm _form;
    private UpdateWalletCommand _model = new();
    private CurrencyDTO? _selectedCurrency;

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        await _form.Validate();

        AddWalletCommand addwallet = _model;

        if (_form.IsValid)
        {
            var response =
                FormType == DialogFormType.Add
                    ? await ApiClient.Create(@"api/v1/wallets", addwallet)
                    : await ApiClient.Put(@"api/v1/wallets", _model);

            if (response.StatusCode is HttpStatusCode.Created or HttpStatusCode.OK)
            {
                var content = await response.Content.ReadAsStringAsync();
                var newItem = JsonConvert.DeserializeObject<WalletDTO>(content) ?? new();

                if (response.StatusCode == HttpStatusCode.Created)
                    Snackbar.Add(new MarkupString($"Created <b>{newItem.WalletName}</b>"), Severity.Success);
                if (response.StatusCode == HttpStatusCode.OK)
                    Snackbar.Add(new MarkupString($"Updated <b>{newItem.WalletName}</b>"), Severity.Success);

                MudDialog.Close(DialogResult.Ok(true));
                FuncsOnCreated?.ForEach(async x => await x.InvokeAsync());
            }
            else
            {
                await response.HandleFailure(AlertService);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (FormType == DialogFormType.Edit && WalletToUpdate is not null)
        {
            _model = new UpdateWalletCommand
            {
                Id = WalletToUpdate.Id,
                WalletName = WalletToUpdate.WalletName,
                IsActive = WalletToUpdate.IsActive,
                DefaultCurrencyId = WalletToUpdate.DefaultCurrencyId
            };

            _selectedCurrency = WalletToUpdate.DefaultCurrency;
        }

        StateHasChanged();
    }

}