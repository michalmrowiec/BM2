@using System.Net
@using BM2.Shared.DTOs
@using BM2.Shared.Requests.Commands.Record
@using BM2.Shared.SystemCodes
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject IAlertService AlertService
@inject IApiClient ApiClient

<BaseDialog DialogTitle="New record" MudDialog="@MudDialog"
            FuncsOnCreated="@( [EventCallback.Factory.Create(this, Submit)])"
            FuncsOnCancel="@( [EventCallback.Factory.Create(this, Cancel)])">
    <BodyContent>
        <MudForm Model="@_model"
                 @ref="@_form"
                 ValidationDelay="0">
            <MudCardContent>
                <AccountAutocomplete Label="Account"
                                     Required
                                     SelectedValue="@(async (a) =>
                                                    {
                                                        _model.AccountId = a.Id;
                                                        await _categoryAutocomplete.SetUri($"api/v1/wallets/{a.WalletId}/categories");
                                                    })"/>

                <CurrencyAutocomplete Label="Currency"
                                      Required
                                      SelectedValue="@((c) => _model.CurrencyId = c.Id)"/>

                <CategoryAutocomplete Label="Category"
                                      Required
                                      @ref="_categoryAutocomplete"
                                      SelectedValue="@((c) => _model.CategoryId = c?.Id ?? Guid.Empty)"/>

                <MudTextField @bind-Value="_model.Name"
                              For="@(() => _model.Name)"
                              Immediate
                              Label="Name"
                              MaxLength="@ModelsRequirements.AccountNameMaxLength"
                              Required/>

                <MudNumericField T="decimal"
                                 @bind-Value="_model.Amount"
                                 For="@(() => _model.Amount)"
                                 Immediate
                                 Label="Amount"
                                 Required/>

                <RecordStatusAutocomplete Label="Status"
                                          Required
                                          StatusType="RecordStatusAutocomplete.RecordStatusType.Record"
                                          SelectedValue="@((s) => _model.StatusId = s?.Id ?? Guid.Empty)"
                                          SelectStartValue="@(x => x.SystemCode == StatusSystemCode.Realized)"/>

            </MudCardContent>
        </MudForm>
    </BodyContent>
</BaseDialog>

@code {
    [Parameter] public List<EventCallback>? FuncsOnCreated { get; set; } = new();
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    private MudForm _form;
    private AddRecordCommand _model = new();
    private IEnumerable<WalletDTO> _wallets = [];
    private WalletDTO _selectedWallet;
    private CategoryAutocomplete _categoryAutocomplete;

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        //_model.WalletId = _selectedWallet.Id;

        await _form.Validate();

        if (_form.IsValid)
        {
            var response = await ApiClient.Create(@"api/v1/records", _model);
            if (response.StatusCode == HttpStatusCode.Created)
            {
                var content = await response.Content.ReadAsStringAsync();
                var newItem = JsonConvert.DeserializeObject<AccountDTO>(content) ?? new();

                Snackbar.Add(new MarkupString($"Created <b>{newItem.AccountName}</b>"), Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
                FuncsOnCreated?.ForEach(async x => await x.InvokeAsync());
            }
            else
            {
                await response.HandleFailure(AlertService);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await ApiClient.Get(@"api/v1/wallets");
        var responseString = await response.Content.ReadAsStringAsync();
        var walletDtos = JsonConvert.DeserializeObject<List<WalletDTO>>(responseString) ?? new List<WalletDTO>();
        _wallets = walletDtos.OrderBy(x => x.WalletName);

        StateHasChanged();
    }

    private async Task<IEnumerable<WalletDTO>> WalletSearch(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return _wallets;

        return _wallets.Where(x => x.WalletName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private string WalletDisplay(WalletDTO? walletDto)
    {
        if (walletDto == null)
            return string.Empty;

        //_model.WalletId = walletDto.Id;

        return walletDto.ToString();
    }

}